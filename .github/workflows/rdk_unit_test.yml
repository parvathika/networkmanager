name: rdk_unit_test

on:
  push:
    branches: [ main, develop, 'release/**']
  pull_request:
    branches: [ main, develop, 'release/**']

env:
  THUNDER_REF: "R4.4.1"

jobs:
  unit-tests:
    name: Build and run unit tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [ gcc, clang ]
        coverage: [ with-coverage, without-coverage ]
        exclude:
          - compiler: clang
            coverage: with-coverage
          - compiler: clang
            coverage: without-coverage
          - compiler: gcc
            coverage: without-coverage

    steps:
      - name: Configure cache
        if: ${{ !env.ACT }}
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            build/Thunder
            build/ThunderInterfaces
            build/ThunderTools
            install
            !install/etc/WPEFramework/plugins
            !install/usr/lib/wpeframework/plugins
          key: ${{ runner.os }}-${{ env.THUNDER_REF }}

      - name: Install packages
        run: |
          sudo apt update
          sudo apt-get install -y pkg-config libglib2.0-dev libnm-dev libcurl4-openssl-dev ninja-build

      - name: Configure Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: pip install jsonref

      - name: Configure CMake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.16.x'

      - name: Checkout thunder repositories
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/rdkcentral/ThunderTools ThunderTools --branch ${{ env.THUNDER_REF }}
          git clone https://github.com/rdkcentral/Thunder Thunder --branch ${{ env.THUNDER_REF }}
          git clone https://github.com/rdkcentral/ThunderInterfaces ThunderInterfaces --branch ${{ env.THUNDER_REF }}

      - name: Build ThunderTools
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake
          -S "${{github.workspace}}/ThunderTools" -B build/ThunderTools
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr"
          -DCMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"
          -DGENERIC_CMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"
          &&
          cmake --build build/ThunderTools --target install -j8

      - name: Build Thunder
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake
          -S "${{github.workspace}}/Thunder" -B build/Thunder
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr"
          -DCMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"
          -DBUILD_TYPE=Debug
          -DBINDING=127.0.0.1
          -DPORT=9998
          &&
          cmake --build build/Thunder --target install -j8

      - name: Build ThunderInterfaces
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          cmake
          -S "${{github.workspace}}/ThunderInterfaces" -B build/ThunderInterfaces
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr"
          -DCMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"
          &&
          cmake --build build/ThunderInterfaces --target install -j8

      - name: Checkout networkmanager
        uses: actions/checkout@v3
        with:
          path: networkmanager

      - name: Generate IARM headers
        run: |
            touch install/usr/lib/libIARMBus.so 
            mkdir -p install/usr/include/rdk/iarmbus
            touch install/usr/include/rdk/iarmbus/libIARM.h
            cd "${{github.workspace}}/networkmanager/Tests/"
            mkdir -p headers/rdk/iarmbus
            cd headers
            touch rdk/iarmbus/libIARM.h rdk/iarmbus/libIBus.h

      - name: Build networkmanager with RDK Proxy
        run: >
          cmake
          -S "${{github.workspace}}/networkmanager"
          -B build/RDKNetworkmanager
          -DCMAKE_TOOLCHAIN_FILE="${{ env.TOOLCHAIN_FILE }}"
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr"
          -DCMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"
          -DCMAKE_CXX_FLAGS="
           -fprofile-arcs
          -ftest-coverage
          -DEXCEPTIONS_ENABLE=ON
          -I ${{github.workspace}}/networkmanager/Tests/headers
          -I ${{github.workspace}}/networkmanager/Tests/headers/rdk/iarmbus
          --include ${{github.workspace}}/networkmanager/Tests/mocks/Iarm.h
          -DUSE_IARMBUS"
          &&
          cmake --build build/RDKNetworkmanager --target install -j8
          
          - name: Set up files
        run: >
          sudo mkdir -p -m 777
          /opt/persistent
          /opt/secure
          /opt/secure/reboot
          /opt/secure/persistent
          /opt/secure/persistent/System
          /opt/logs
          /lib/rdk
          /run/media/sda1/logs/PreviousLogs
          /run/sda1/UsbTestFWUpdate
          /run/sda1/UsbProdFWUpdate
          /run/sda2
          /var/run/wpa_supplicant
          &&
          sudo touch
          /opt/standbyReason.txt
          /opt/tmtryoptout
          /opt/fwdnldstatus.txt
          /opt/dcm.properties
          /etc/device.properties
          /etc/dcm.properties
          /etc/authService.conf
          /version.txt
          /run/media/sda1/logs/PreviousLogs/logFile.txt
          /run/sda1/HSTP11MWR_5.11p5s1_VBN_sdy.bin
          /run/sda1/UsbTestFWUpdate/HSTP11MWR_3.11p5s1_VBN_sdy.bin
          /run/sda1/UsbProdFWUpdate/HSTP11MWR_4.11p5s1_VBN_sdy.bin
          /lib/rdk/getMaintenanceStartTime.sh
          /tmp/opkg.conf
          &&
          sudo chmod 777
          /opt/standbyReason.txt
          /opt/tmtryoptout
          /opt/fwdnldstatus.txt
          /opt/dcm.properties
          /etc/device.properties
          /etc/dcm.properties          
          /etc/authService.conf
          /version.txt
          /lib/rdk/getMaintenanceStartTime.sh
          /tmp/opkg.conf

      - name: Run unit tests without valgrind
        run: >
          PATH=${{github.workspace}}/install/usr/bin:${PATH}
          LD_LIBRARY_PATH=${{github.workspace}}/install/usr/lib:${{github.workspace}}/install/usr/lib/wpeframework/plugins:${LD_LIBRARY_PATH}
          RdkWifiMonitorSignalStrengthTest
      - name: Run unit tests with valgrind
        if: ${{ !env.ACT }}
        run: >
          PATH=${{github.workspace}}/install/usr/bin:${PATH}
          LD_LIBRARY_PATH=${{github.workspace}}/install/usr/lib:${{github.workspace}}/install/usr/lib/wpeframework/plugins:${LD_LIBRARY_PATH}
          valgrind
          --tool=memcheck
          --log-file=valgrind_log
          --leak-check=yes
          --show-reachable=yes
          --track-fds=yes
          --fair-sched=try
          RdkWifiMonitorSignalStrengthTest

      - name: Generate coverage
        if: ${{ matrix.coverage == 'with-coverage' && !env.ACT }}
        run: >
          cp ${{github.workspace}}/networkmanager/Tests/L1Tests/.lcovrc_l1 ~/.lcovrc
          &&
          lcov -c
          -o coverage.info
          -d build/networkmanager
          &&
          lcov
          -r coverage.info
          '/usr/include/*'
          '*/build/networkmanager/_deps/*'
          '*/install/usr/include/*'
          '*/Tests/headers/*'
          '*/Tests/mocks/*'
          '*/Tests/L1Tests/tests/*'
          -o filtered_coverage.info
          &&
          genhtml
          -o coverage
          -t "wifisignalstrength coverage"
          filtered_coverage.info

      - name: Upload artifacts
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            coverage/
            valgrind_log
          if-no-files-found: warn
